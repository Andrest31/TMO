import streamlit as st
import pandas as pd
import numpy as np
import joblib
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import matplotlib.pyplot as plt
import seaborn as sns

st.set_page_config(page_title="Heart Disease Prediction", layout="centered")
st.title("‚ù§Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ —Å–µ—Ä–¥–µ—á–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π")
st.markdown("–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∏—Å–∫–∞ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π.")

@st.cache_data
def preprocess_data(df):
    df = df.copy()
    
    # –ö–æ–¥–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    df['Sex'] = df['Sex'].map({'M': 1, 'F': 0})
    df['ChestPainType'] = df['ChestPainType'].map({'ATA': 0, 'NAP': 1, 'ASY': 2, 'TA': 3})
    df['RestingECG'] = df['RestingECG'].map({'Normal': 0, 'ST': 1, 'LVH': 2})
    df['ExerciseAngina'] = df['ExerciseAngina'].map({'N': 0, 'Y': 1})
    df['ST_Slope'] = df['ST_Slope'].map({'Up': 0, 'Flat': 1, 'Down': 2})
    
    return df

@st.cache_data
def load_data():
    raw = pd.read_csv("../data/heart.csv")
    processed = preprocess_data(raw)
    return processed


@st.cache_data
def load_scaler():
    return joblib.load("../models/scaler.pkl")

df = load_data()
scaler = load_scaler()

st.sidebar.header("–í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞—Ü–∏–µ–Ω—Ç–∞")

def user_input_features():
    age = st.sidebar.slider("–í–æ–∑—Ä–∞—Å—Ç", 20, 80, 50)
    sex = st.sidebar.selectbox("–ü–æ–ª", ["–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞"])
    cp = st.sidebar.selectbox("–¢–∏–ø –±–æ–ª–∏ –≤ –≥—Ä—É–¥–∏", ["–¢–∏–ø 0", "–¢–∏–ø 1", "–¢–∏–ø 2", "–¢–∏–ø 3"])
    bp = st.sidebar.slider("–ê—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ", 80, 200, 120)
    cholesterol = st.sidebar.slider("–•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω", 100, 600, 200)
    fbs = st.sidebar.selectbox("–°–∞—Ö–∞—Ä > 120 –º–≥/–¥–ª", ["–ù–µ—Ç", "–î–∞"])
    restecg = st.sidebar.selectbox("–≠–ö–ì –≤ –ø–æ–∫–æ–µ", ["–ù–æ—Ä–º–∞", "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", "–ì–∏–ø–µ—Ä—Ç—Ä–æ—Ñ–∏—è"])
    maxhr = st.sidebar.slider("–ú–∞–∫—Å. –ø—É–ª—å—Å", 60, 220, 150)
    exang = st.sidebar.selectbox("–°—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è –ø—Ä–∏ –Ω–∞–≥—Ä—É–∑–∫–µ", ["–ù–µ—Ç", "–î–∞"])
    oldpeak = st.sidebar.slider("Oldpeak", 0.0, 6.0, 1.0, step=0.1)
    slope = st.sidebar.selectbox("–ù–∞–∫–ª–æ–Ω ST", ["–ü–ª–∞–≤–Ω—ã–π", "–í–≤–µ—Ä—Ö", "–í–Ω–∏–∑"])

    data = {
        "Age": age,
        "Sex": 1 if sex == "–ú—É–∂—á–∏–Ω–∞" else 0,
        "ChestPainType": int(cp.split()[-1]),
        "RestingBP": bp,
        "Cholesterol": cholesterol,
        "FastingBS": 1 if fbs == "–î–∞" else 0,
        "RestingECG": restecg_map(restecg),
        "MaxHR": maxhr,
        "ExerciseAngina": 1 if exang == "–î–∞" else 0,
        "Oldpeak": oldpeak,
        "ST_Slope": slope_map(slope),
    }
    return pd.DataFrame([data])

def restecg_map(value):
    return {"–ù–æ—Ä–º–∞": 0, "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ": 1, "–ì–∏–ø–µ—Ä—Ç—Ä–æ—Ñ–∏—è": 2}[value]

def slope_map(value):
    return {"–ü–ª–∞–≤–Ω—ã–π": 0, "–í–≤–µ—Ä—Ö": 1, "–í–Ω–∏–∑": 2}[value]

input_df = user_input_features()

X = df.drop("HeartDisease", axis=1)
y = df["HeartDisease"]

X_scaled = scaler.transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

n_estimators = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤ –≤ Random Forest", 10, 200, 100, step=10)

model = RandomForestClassifier(n_estimators=n_estimators, random_state=42)
model.fit(X_train, y_train)

input_scaled = scaler.transform(input_df)
prediction = model.predict(input_scaled)

y_pred = model.predict(X_test)

st.subheader("üìà –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏")
acc = accuracy_score(y_test, y_pred)
prec = precision_score(y_test, y_pred)
rec = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

st.write(f"**Accuracy:** {acc:.2f}")
st.write(f"**Precision:** {prec:.2f}")
st.write(f"**Recall:** {rec:.2f}")
st.write(f"**F1-–º–µ—Ä–∞:** {f1:.2f}")

result_text = "üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫" if prediction[0] == 1 else "üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"
st.subheader("üß† –ü—Ä–æ–≥–Ω–æ–∑:")
st.write(result_text)

st.subheader("üìå –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
importances = model.feature_importances_
features = X.columns
importance_df = pd.DataFrame({"–ü—Ä–∏–∑–Ω–∞–∫": features, "–í–∞–∂–Ω–æ—Å—Ç—å": importances}).sort_values("–í–∞–∂–Ω–æ—Å—Ç—å", ascending=False)

fig, ax = plt.subplots()
sns.barplot(x="–í–∞–∂–Ω–æ—Å—Ç—å", y="–ü—Ä–∏–∑–Ω–∞–∫", data=importance_df, ax=ax)
st.pyplot(fig)

st.markdown("---")
st.markdown("**–í—ã–≤–æ–¥:**")
st.markdown("""
- –ú–æ–¥–µ–ª—å –æ–±—É—á–∞–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ `n_estimators`
- –°–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: `Oldpeak`, `ST_Slope`, `ExerciseAngina`
- –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞ —É –Ω–æ–≤—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
""")
